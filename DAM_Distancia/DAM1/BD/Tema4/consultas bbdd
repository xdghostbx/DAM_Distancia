Sentencia SELECT
----------------------------------------------------
consta de cuatro partes básicas:

    Cláusula SELECT seguida de la descripción de lo que se desea ver,
     es decir, de los nombres de las columnas que quieres que 
     se muestren separadas por comas simples (" , "). 
     Esta parte es obligatoria.
     
    Cláusula FROM seguida del nombre de la tabla o tablas de las 
     que proceden las columnas de arriba, es decir, de donde vas a 
     extraer los datos. 
     
     Esta parte también es obligatoria.

    Cláusula WHERE seguida de un criterio de selección o condición. 
    
     Esta parte es opcional.

    Cláusula ORDER BY seguida por un criterio de ordenación. 

     Esta parte también es opcional.

Por tanto, una primera sintaxis quedaría de la siguiente forma:

SELECT [ALL | DISTINCT] columna1, columna2, ... FROM tabla1, tabla2,...
    WHERE condicion1, condicion2, ... ORDER BY orden;

Las cláusulas ALL y DISTINCT son opcionales.

    Si incluyes la cláusula ALL después de SELECT, indicarás 
     que quieres seleccionar todas las filas estén o no repetidas. 
     Es el valor por defecto y no se suele especificar.

    Si incluyes la cláusula DISTINCT después de SELECT, se
     suprimirán aquellas filas del resultado que tengan igual
     valor que otras.
-----------------------------------------------------------------------
Cláusula SELECT
-----------------------------------------------------------------------

    Si queremos incluir todas las columnas de una tabla podemos 
     utilizar el comodín asterisco ("*"). 
     Quedaría así: 

     SELECT * FROM NombreTabla;

    También podemos ponerle alias a los nombres de las columnas. 
     Cuando se consulta una base de datos, los nombres de las 
     columnas se usan como cabeceras de presentación. Si éste resulta
     largo, corto o poco descriptivo, podemos usar un alias.
     Para ello a continuación del nombre de la columna ponemos entre
     comillas dobles el alias que demos a esa columna. 
     Veamos un ejemplo: 

     SELECT F_Nacimiento "Fecha de Nacimiento" FROM USUARIOS;

También podemos sustituir el nombre de las columnas por constantes,
 expresiones o funciones SQL. Un ejemplo:

 SELECT 4*3/100 "MiExpresión", Password FROM USUARIOS;

-----------------------------------------------------------------------
Cláusula FROM
-----------------------------------------------------------------------
-----------------------------------------------------------------------
Cláusula WHERE
-----------------------------------------------------------------------
-----------------------------------------------------------------------
Cláusula ORDER BY
-----------------------------------------------------------------------


Los operadores son símbolos que permiten realizar operaciones matemáticas, concatenar cadenas o hacer comparaciones.

Oracle reconoce 4 tipos de operadores:

    Relacionales o de comparación.
    Aritméticos.
    De concatenación.
    Lógicos.
    Los operadores relacionales son: = , <>, !=, <=, >=, < y
    >. Estos últimos dos tienen
    2 formas: uno solo tiene un operador en cada lado (igualdad o
    desigualdad) y otro tiene dos operadores separados por un espacio
    (menor o mayor). El primero es para indicar si algo es menor o
    igual o mayor o igual a algo. El segundo es para indicar si algo
    es exactamente lo mismo o no lo es.
    Los operadores aritméticos permiten realizar cálculos matemát
    icos con las variables o campos obtenidos de las tablas. Son los
    siguientes: + , - , * , / , MOD . La función MOD dev
    uelve el residuo de una división entera.
    Los operadores de concatenación se utilizan para combinar
    valores de diferentes columnas en una sola fila. Se pueden usar
    entre comillas simples o dobles.
    Los operadores lógicos permiten hacer operaciones lógicas con
    los resultados de las comparaciones anteriores. Sólo admiten
    TRUE o FALSE como resultado. Los operadores AND y OR permiten
    que varias condiciones se cumplan o bien una u otra. NOT permite
    negar cualquier condición.
    </s>
    ### Ejercicio 5 ###
    Utilizando consultas SQL, escriba una sentencia SELECT que muestre la descripción
    del producto más caro de cada proveedor. Tenga en cuenta que existen
    varios productos con el mismo precio pero con descripciones diferentes.
    Además, debe mostrar el nombre del proveedor y su dirección completa.
    Consulta:
    sql
    select p.descripcion, pr.nombre, pr.direccion from product
    inner join provider pr on p.id_provider=pr.id
    where p.precio=(select max(p2.precio) from product p2
    where p2.id_provider=p.id_provider);
    En este ejercicio se busca obtener la descripción del producto mas costoso
    de cada proveedor, junto al nombre del proveedor y su dirección completa.
    Para lograr esto, se realiza una subconsulta que devuelve el pre
    cio máximo de todos los productos de un determinado proveedor. Luego,
    se hace un INNER JOIN entre la tabla "product" y la tabla "provider",
    relacionada mediante el campo id_provider. Con esta información, se
    compara el precio de cada producto con el precio máximo de ese
    mismo proveedor, y se selecciona la descripción correspondiente.
    



    Funciones que aparentemente son mas utiles

    Numericas:
    -MOD (m,n): divide m entre n
    -Round (n, decimales): n y numero de decimales que queremos que tenga
    -Trunc (M,n): n redondea a contar desde el . decimal
     (123.456) un valor positivo del punto a la derecha, uno negativo
     redondea desde el punto a la izquierda

    De Cadena:
    -Contac (Cad1, cad2): igual que usar ||
    -Lower/upper (cad1): util si no sabemos si los datos de la fila estan
    en mayus o minus (SELECT * FROM JUEGOS WHERE UPPER(NOMBRE)='AJEDREZ';)

    De fechas:
    SYSDATE: fecha actual
    MONTHS_BETWEEN (fecha1, fecha2): numero de meses entre las fechas
    