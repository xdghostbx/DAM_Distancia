package com.example.hibernate.model;
// Generated 7 mar 2025, 17:29:40 by Hibernate Tools 6.6.0.Final


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import static jakarta.persistence.GenerationType.IDENTITY;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import java.math.BigDecimal;
//import java.sql.Date;
import java.time.*;
import java.util.HashSet;
import java.util.Set;

/**
 * Emp generated by hbm2java
 */
@Entity
@Table(name="emp"
)
public class Empleado  implements java.io.Serializable {


     private Integer empno;
     private Dept dept;
     private Empleado jefe;
     private String ename;
     private String job;

     //private Date hiredate;
     private LocalDate hiredate;
     private BigDecimal sal;
     private BigDecimal comm;
     private Set<Account> accounts = new HashSet<Account>(0);
     private Set<Project> projects = new HashSet<Project>(0);
     private Set<Empleado> subordinados = new HashSet<Empleado>(0);

    public Empleado() {
    }

    public Empleado(Dept dept, Empleado jefe, String ename, String job, LocalDate hiredate, BigDecimal sal, BigDecimal comm, Set<Account> accounts, Set<Project> projects, Set<Empleado> subordinados) {
       this.dept = dept;
       this.jefe = jefe;
       this.ename = ename;
       this.job = job;
       this.hiredate = hiredate;
       this.sal = sal;
       this.comm = comm;
       this.accounts = accounts;
       this.projects = projects;
       this.subordinados = subordinados;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="EMPNO", unique=true, nullable=false)
    public Integer getEmpno() {
        return this.empno;
    }
    
    public void setEmpno(Integer empno) {
        this.empno = empno;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="DEPTNO")
    public Dept getDept() {
        return this.dept;
    }
    
    public void setDept(Dept dept) {
        this.dept = dept;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="MGR")
    public Empleado getJefe() {
        return this.jefe;
    }
    
    public void setJefe(Empleado jefe) {
        this.jefe = jefe;
    }

    
    @Column(name="ENAME", length=20)
    public String getEname() {
        return this.ename;
    }
    
    public void setEname(String ename) {
        this.ename = ename;
    }

    
    @Column(name="JOB", length=20)
    public String getJob() {
        return this.job;
    }
    
    public void setJob(String job) {
        this.job = job;
    }

    //@Temporal(TemporalType.DATE)
    @Column(name="HIREDATE", length=10)
    public LocalDate getHiredate() {
        return this.hiredate;
    }
    
    public void setHiredate(LocalDate hiredate) {
        this.hiredate = hiredate;
    }

    
    @Column(name="SAL", precision=15, scale=2)
    public BigDecimal getSal() {
        return this.sal;
    }
    
    public void setSal(BigDecimal sal) {
        this.sal = sal;
    }

    
    @Column(name="COMM", precision=15, scale=2)
    public BigDecimal getComm() {
        return this.comm;
    }
    
    public void setComm(BigDecimal comm) {
        this.comm = comm;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="emp")
    public Set<Account> getAccounts() {
        return this.accounts;
    }
    
    public void setAccounts(Set<Account> accounts) {
        this.accounts = accounts;
    }

@ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="project_emp", catalog="empresa", joinColumns = { 
        @JoinColumn(name="EMPNO", nullable=false/*, updatable=false */) }, inverseJoinColumns = { 
        @JoinColumn(name="PROJECTNO", nullable=false/*, updatable=false */) })
    public Set<Project> getProjects() {
        return this.projects;
    }
    
    public void setProjects(Set<Project> projects) {
        this.projects = projects;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="jefe")
    public Set<Empleado> getSubordinados() {
        return this.subordinados;
    }
    
    public void setSubordinados(Set<Empleado> subordinados) {
        this.subordinados = subordinados;
    }




}


